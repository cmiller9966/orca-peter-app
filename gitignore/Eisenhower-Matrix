
// components/EisenhowerMatrix.js
import React, { useState } from 'react';
import { View, Text, StyleSheet, TouchableOpacity, Modal, TextInput, FlatList } from 'react-native';

const EisenhowerMatrix = () => {
  const [tasks, setTasks] = useState([]);
  const [modalVisible, setModalVisible] = useState(false);
  const [newTask, setNewTask] = useState('');
  const [quadrant, setQuadrant] = useState('');

  const addTask = () => {
    if (newTask && quadrant) {
      setTasks([...tasks, { id: Date.now(), text: newTask, quadrant }]);
      setNewTask('');
      setQuadrant('');
      setModalVisible(false);
    }
  };

  const renderQuadrant = (quadrantTitle) => (
    <View style={styles.quadrant}>
      <Text style={styles.quadrantTitle}>{quadrantTitle}</Text>
      <FlatList
        data={tasks.filter(task => task.quadrant === quadrantTitle)}
        keyExtractor={item => item.id.toString()}
        renderItem={({ item }) => <Text style={styles.taskItem}>{item.text}</Text>}
      />
    </View>
  );

  return (
    <View style={styles.container}>
      <View style={styles.matrix}>
        {['Urgent and Important', 'Not Urgent but Important', 'Urgent but Not Important', 'Not Urgent and Not Important'].map(q => renderQuadrant(q))}
      </View>
      <TouchableOpacity style={styles.addButton} onPress={() => setModalVisible(true)}>
        <Text style={styles.addButtonText}>+ Add Task</Text>
      </TouchableOpacity>
      
      {/* Modal for adding tasks */}
      <Modal visible={modalVisible} transparent={true} animationType="slide">
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <TextInput
              placeholder="Task Description"
              value={newTask}
              onChangeText={setNewTask}
              style={styles.input}
            />
            <Text>Select Quadrant:</Text>
            {['Urgent and Important', 'Not Urgent but Important', 'Urgent but Not Important', 'Not Urgent and Not Important'].map(q => (
              <TouchableOpacity key={q} onPress={() => setQuadrant(q)} style={styles.quadrantOption}>
                <Text style={{ color: quadrant === q ? 'blue' : 'black' }}>{q}</Text>
              </TouchableOpacity>
            ))}
            <TouchableOpacity onPress={addTask} style={styles.saveButton}>
              <Text style={styles.saveButtonText}>Save Task</Text>
            </TouchableOpacity>
            <TouchableOpacity onPress={() => setModalVisible(false)} style={styles.cancelButton}>
              <Text style={styles.cancelButtonText}>Cancel</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    </View>
  );
};

export default EisenhowerMatrix;

const styles = StyleSheet.create({
  container: { flex: 1, padding: 10 },
  matrix: { flex: 1, flexDirection: 'row', flexWrap: 'wrap' },
  quadrant: { width: '50%', padding: 10 },
  quadrantTitle: { fontWeight: 'bold', marginBottom: 5 },
  taskItem: { backgroundColor: '#f0f0f0', padding: 5, marginVertical: 2, borderRadius: 4 },
  addButton: { backgroundColor: '#007BFF', padding: 15, borderRadius: 30, position: 'absolute', bottom: 30, right: 30 },
  addButtonText: { color: 'white', fontWeight: 'bold' },
  modalContainer: { flex:1, justifyContent: 'center', alignItems: 'center', backgroundColor: 'rgba(0,0,0,0.5)' },
  modalContent: { width: '80%', backgroundColor: 'white', padding: 20, borderRadius: 10 },
  input: { borderBottomWidth: 1, marginBottom: 10 },
  quadrantOption: { padding: 10 },
  saveButton: { backgroundColor: '#28a745', padding: 10, borderRadius: 5, marginTop: 10 },
  saveButtonText: { color: 'white', textAlign: 'center' },
  cancelButton: { backgroundColor: '#dc3545', padding: 10, borderRadius: 5, marginTop: 10 },
  cancelButtonText: { color: 'white', textAlign: 'center' },
});


###Explanation:

## The EisenhowerMatrix component allows users to add tasks and categorize them into one of the four quadrants.
## A modal is used to input the task description and select the appropriate quadrant.
## Tasks are displayed under their respective quadrants.
